---
title: "Day 9: hexagons"
author: "Arthur Bazolli"
date: 2023-11-09
format: html
---

Today we're talking hexagons, so I'm revisiting a project I did for my Spatial Econometrics class on exploratory spatial data analysis (**Esda**). Our goal is to look for spatial patterns in our data, that is: are my values close to my neighbors'? Or are they different? In both cases, is this (dis)similarity random... or does it follows a **spatial pattern**?

Maybe Esda seems a bit old fashioned now, but it was a huge thing in the 90s/2000s. Still, it is a very invaluable tool when, err... exploring our data! Economics has a long history of recognizing the importance of space.

# Setup 

Load packages
```{r}
#| label: setup
#| warning: false

# Geocomputation
library(sp)
library(sf)
library(spdep)
library(tmap)
library(geobr)
library(aopdata)

# General
library(here)
library(tidyverse)
```

Get data---everything is online, so you can easily reproduce yourself. Maybe use a different city? I have chosen my beloved hometown Belo Horizonte, but most major Brazilian cities are included in the project as of 2022. It mostly depends if they have a [GTFS](https://en.wikipedia.org/wiki/GTFS) available or not.
```{r}
#| label: download

shp_bhz <- read_municipality(code_muni = 3106200, simplified = F) 

shp_footprint <- read_urban_area() %>% filter(code_muni == 3106200) 

shp_aop <- read_access(city = "belo horizonte", mode = "public_transport", peak = T, year = 2019, geometry = T)
```



# Prepare data

## Tidying
First, since `{aopdata}` offers us a lot of variables, I will start selecting only a few of them. I also omit the `NAs` since they would prevent us to correctly calculate a neighbors distance matrix.
I'm purposely leaving more variables here than I use just to give you some suggestions of what to do---I used all of them in another work. Check the full list in the `aopdata::read_access` help file.

Next, I transform the cummulative accessibility measures to the relative form, since this makes it easier for us to compare regions.
```{r}
#| label: tidying

# Selecting variables from AOP dataset
shp_aop <- shp_aop %>% 
  select(year, id_hex, 
         P001:P007, R001, R003, T001:T004, E001, S001,
         CMATT60, CMAST60, CMAET60) %>% 
  na.omit()

# Transforming data
shp_aop <- shp_aop %>% 
  mutate(
    CMATT60 = 100*CMATT60/sum(T001), CMAST60 = 100*CMAST60/sum(S001), CMAET60 = 100*CMAET60/sum(E001),
    R001_log = log(R001)
  )
```


## Neighborhood matrix

Since we are using polygons and not points, we construct our distance matrix using a pattern. The most common is the queen one, which takes only a polygon's direct neighbors. There's also the rook pattern (yes, both come from chess), refer to Prof. Anselin's excellent materials on [GeoDa center](https://geodacenter.github.io/workbook/4a_contig_weights/lab4a.html) for more information.

With the `spdep` package, we do that in two steps: first, we make a neighbors list from the polygon according to our contiguity criterion with `poly2nb`, which creates an object of class `nb`. Next, we get the distance matrix, an object of class `listw`, with `nb2listw`. We use `style = W` to make a standardized matrix.
```{r}
#| label: nb

nb_aop <- poly2nb(shp_aop, queen = T)

W_queen <- nb2listw(nb_aop, style = "W")
```


## Spatial autocorrelation measures

Here we'll focus on the Local Index of Spatial Autocorrelation (**Lisa**). First, on the univariate case, our goal is to analyze the spatial pattern of income. Four patterns are possible and the interpretation is straightforward: low-low and high-high indicates similarity between neighborhoods, whereas low-high and high-low are the cases when your surroundings are very different from you.

Next, the bivariate scenario compares how income **and** accessibility relate in space, but the interpretation changes. Low-low and high-high indicate homogeneous patterns in a given region, whereas high-low indicates in our case high income and low accessibility (because `R001_log` came first on `localmoran_bv`) and low-high the opposite situation. 
```{r}
#| label: lisa

lisa <- localmoran(shp_aop$R001_log, W_queen)

lisa_bi <- localmoran_bv(shp_aop$R001_log, shp_aop$CMATT60, W_queen, nsim = 9999)

# bind the quadrants and their p-value so we can plot it nicely
shp_aop <- shp_aop %>% 
  cbind(
    lisa = attr(lisa, "quadr")[,1], lisa_p = lisa[,5],
    lisa_bi = attr(lisa, "quadr")[,1], lisa_bi_p = lisa_bi[,5]
  )
```



# Map it!

## Base map

First, a base map with the region's urban footprint and city limits. I also generated a custom palette using [coolors](https://coolors.co/).
```{r}
#| label: map_base

map_base <- ggplot() +
  geom_sf(
    data = shp_footprint,
    fill = "grey90",
    color = NA
  ) +
  geom_sf(
    data = shp_bhz,
    fill = NA
  )

palette <- c("#f694c1", "#FE5D26", "#8aaa79", "#A9DEF9")
names(palette) <- levels(shp_aop$lisa_bi)
```

# LISA map

First, a stactic map. As usual, I use `coord_sf` to limit our viewing region, since `shp_footprint` covers a very large region than where we actually have data.
```{r}
#| label: map_lisa

map_base +
  geom_sf(
    data = shp_aop %>% filter(lisa_p <= 0.05),
    aes(fill = lisa, color = lisa)
  ) +
  scale_fill_manual(values = palette) +
  scale_color_manual(values = palette) +
  labs(
    title = "Income patterns: segregation and inequality?",
    subtitle = "Local Moran's I for income\nBelo Horizonte, Brazil, 2019",
    fill = "LISA Clusters\nsignificant at 5%",
    color = "LISA Clusters\nsignificant at 5%",
    caption = "Source: {aopdata} and {geobr}"
  ) +
  coord_sf(xlim = c(-44.08, -43.85), ylim = c(-20.05, -19.78)) +
  theme_void() %+replace%
  theme(
    text = element_text(family = "Atkinson Hyperlegible"),
    plot.title = element_text(face = "bold", size = 14, hjust = 0),
    plot.background = element_rect(fill = "white", color = NA)
  )

ggsave(here("output/p-day9_1.png"))
```

Dynamic map: great for exploring!
```{r}
tmap_mode("view")

tmap_lisa <- tm_shape(shp_bhz) +
  tm_borders() +
  tm_shape(shp_aop %>% filter(lisa_p <= 0.05)) +
  tm_fill(col = "lisa", alpha = 0.60, palette = palette)

saveRDS(tmap_lisa, here("data/tmap_lisa_bhz.RDS"))
```


## BiLISA

Stactic
```{r}
#| label: map_bilisa

map_base +
  geom_sf(
    data = shp_aop %>% filter(lisa_bi_p <= 0.05),
    aes(fill = lisa_bi, color = lisa_bi)
  ) +
  scale_fill_manual(values = palette) +
  scale_color_manual(values = palette) +
  labs(
    title = "Income and accessibility: segregation and inequality?",
    subtitle = "Bivariate Local Moran's I for income and access to jobs\nBelo Horizonte, Brazil, 2019",
    fill = "BiLISA Clusters\nsignificant at 5%",
    color = "BiLISA Clusters\nsignificant at 5%",
    caption = "Source: {aopdata} and {geobr}"
  ) +
  coord_sf(xlim = c(-44.08, -43.85), ylim = c(-20.05, -19.78)) +
  theme_void() %+replace%
  theme(
    text = element_text(family = "Atkinson Hyperlegible"),
    plot.title = element_text(face = "bold", size = 14, hjust = 0),
    plot.background = element_rect(fill = "white", color = NA)
  )

ggsave(here("output/p-day9_2.png"))
```

Dynamic
```{r}
tmap_lisa_bi <- tm_shape(shp_bhz) +
  tm_borders() +
  tm_shape(shp_aop %>% filter(lisa_bi_p <= 0.05)) +
  tm_fill(col = "lisa_bi", alpha = 0.60, palette = palette)

saveRDS(tmap_lisa_bi, here("data/tmap_lisa_bi_bhz.RDS"))
```








